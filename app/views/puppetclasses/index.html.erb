<% title _("Puppet classes") %>

<% title_actions import_proxy_select(hash_for_import_environments_puppetclasses_path) %>

<table class="table table-bordered table-striped">
  <tr>
    <th><%= sort :name, :as => s_("Puppetclass|Name") %></th>
    <th><%= sort :environment, :as => _("Environments and documentation") %></th>
    <th><%= _('Host group') %></th>
    <th><%= sort :hosts_count, :as => _('Hosts'), :default => "DESC" %></th>
    <th><%= sort :params_count, :as => _('Parameters'), :default => "DESC" %></th>
    <th><%= sort :variables_count, :as => _('Variables'), :default => "DESC" %></th>
    <th></th>
  </tr>
  <% for puppetclass in @puppetclasses %>
    <tr>
      <td><%=link_to_if_authorized trunc(puppetclass.name), hash_for_edit_puppetclass_path(:id => puppetclass).merge(:auth_object => puppetclass, :authorizer => authorizer) %></td>
      <td>
        <% puppetclass.environments.uniq.each do |environment| %>
          <%= link_to_function environment, 'show_rdoc(this)', :'data-url' => rdoc_classes_path(environment, puppetclass.name) %>
        <% end %>
      </td>
      <td><%= puppetclass.hostgroups.map {|hg| link_to_if_authorized trunc(hg), hash_for_edit_hostgroup_path(:id=>hg).merge(:auth_object => hg, :authorizer => @hostgroups_authorizer)}.to_sentence.html_safe %></td>
      <td> <%= link_to puppetclass.hosts_count, hosts_path(:search => "class = #{puppetclass.name}")%></td>
      <td><%= puppetclass.global_class_params_count %> </td>
      <td><%= puppetclass.lookup_keys_count %> </td>
      <td>
       <%= action_buttons(
       display_delete_if_authorized(hash_for_puppetclass_path(:id => puppetclass).merge(:auth_object => puppetclass, :authorizer => authorizer), :confirm => _("Delete %s?") % puppetclass.name, :action => :delete),
                                    link_to_if(puppetclass.class_params.present? && !overridden?(puppetclass), 'Override parameters', :controller => "puppetclasses",:action => "override", :message => 'overridden', :enable => true, :id => puppetclass.name, :confirm => _("This will set parameters of the class %s as overridden.Accept ?") % puppetclass.name ){},
                                    link_to_if(puppetclass.class_params.present? && overridden?(puppetclass), 'Default Parameters', :controller => "puppetclasses", :action => "override", :message => 'defaults', :enable => false, :id => puppetclass.name, :confirm => _("This will reset parameters to default values %s.Accept ?") % puppetclass.name ){}) %>
      </td>
    </tr>
  <% end %>
</table>

<%= will_paginate_with_info @puppetclasses %>
