// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SettingPageContent should render on data 1`] = `
<SettingsPageContent
  groupedSettings={
    Object {
      "Setting::Auth": Array [
        Object {
          "category": "Setting::Auth",
          "categoryName": "Authentication",
          "configFile": "settings.yaml",
          "createdAt": "2019-04-30 11:24:17 +0200",
          "default": 4,
          "description": "Cost value of bcrypt password hash function for internal auth-sources (4-30). Higher value is safer but verification is slower particularly for stateless API calls and UI logins. Password change needed to take effect.",
          "fullName": "BCrypt password cost",
          "id": 232,
          "name": "bcrypt_cost",
          "readonly": false,
          "selectValues": null,
          "settingsType": "integer",
          "updatedAt": "2019-10-09 10:02:35 +0200",
          "value": 9,
        },
      ],
      "Setting::Email": Array [
        Object {
          "category": "Setting::Email",
          "categoryName": "Email",
          "configFile": "settings.yaml",
          "createdAt": "2019-11-06 09:42:45 +0100",
          "default": "root@example.com",
          "description": "Email reply address for emails that Foreman is sending",
          "fullName": "Email reply address",
          "id": 36,
          "name": "email_reply_address",
          "readonly": false,
          "selectValues": null,
          "settingsType": "string",
          "updatedAt": "2020-04-29 15:48:23 +0200",
          "value": "root@example.com",
        },
      ],
      "Setting::General": Array [
        Object {
          "category": "Setting::General",
          "categoryName": "General",
          "configFile": "settings.yaml",
          "createdAt": "2019-11-06 09:42:45 +0100",
          "default": "root@example.com",
          "description": "The default administrator email address",
          "fullName": "Administrator email address",
          "id": 36,
          "name": "administrator",
          "readonly": false,
          "selectValues": null,
          "settingsType": "string",
          "updatedAt": "2020-04-29 15:48:23 +0200",
          "value": "root@example.com",
        },
        Object {
          "category": "Setting::General",
          "categoryName": "General",
          "configFile": "settings.yaml",
          "createdAt": "2018-01-22 14:03:38 +0100",
          "default": true,
          "description": "Foreman will append domain names when new hosts are provisioned",
          "fullName": "Append domain names to the host",
          "id": 177,
          "name": "append_domain_name_for_hosts",
          "readonly": false,
          "selectValues": null,
          "settingsType": "boolean",
          "updatedAt": "2018-01-22 14:03:38 +0100",
          "value": true,
        },
        Object {
          "category": "Setting::General",
          "categoryName": "General",
          "configFile": "settings.yaml",
          "createdAt": "2019-11-06 09:42:45 +0100",
          "default": Array [],
          "description": "Set hostnames to which requests are not to be proxied. Requests to the local host are excluded by default.",
          "fullName": "HTTP(S) proxy except hosts",
          "id": 47,
          "name": "http_proxy_except_list",
          "readonly": false,
          "selectValues": null,
          "settingsType": "array",
          "updatedAt": "2020-03-20 13:44:40 +0100",
          "value": Array [
            "localhost",
          ],
        },
      ],
      "Setting::Provisioning": Array [
        Object {
          "category": "Setting::Provisioning",
          "categoryName": "Provisioning",
          "configFile": "settings.yaml",
          "createdAt": "2018-11-06 09:42:45 +0100",
          "default": "PXELinux global default",
          "description": "Global default PXELinux template. This template gets deployed to all configured TFTP servers. It will not be affected by upgrades.",
          "fullName": "Global default PXELinux template",
          "id": 105,
          "name": "global_PXELinux",
          "readonly": false,
          "selectValues": Object {
            "collection": Object {
              "coreOsPxeLinux": "CoreOS PXELinux",
              "freeBsdMfsBsdPxeLinux": "FreeBSD (mfsBSD) PXELinux",
              "kickstartDefaultPxeLinux": "Kickstart default PXELinux",
              "kickstartOVirtRhvhPxeLinux": "Kickstart oVirt-RHVH PXELinux",
              "preseedDefaultPxeLinux": "Preseed default PXELinux",
              "pxeLinuxChainIPxe": "PXELinux chain iPXE",
              "pxeLinuxChainIPxeUndi": "PXELinux chain iPXE UNDI",
              "pxeLinuxDefaultLocalBoot": "PXELinux default local boot",
              "pxeLinuxDefaultMemdisk": "PXELinux default memdisk",
              "pxeLinuxGlobalDefault": "PXELinux global default",
              "rancherOsPxeLinux": "RancherOS PXELinux",
              "templatesAFakePxelinux": "[templates] A fake pxelinux",
              "testDefault": "TEST default",
              "waikDefaultPxeLinux": "WAIK default PXELinux",
              "windowsDefaultPxeLinux": "Windows default PXELinux",
              "xenServerDefaultPxeLinux": "XenServer default PXELinux",
            },
            "kind": "hash",
          },
        },
        Object {
          "category": "Setting::Provisioning",
          "categoryName": "Provisioning",
          "configFile": "settings.yaml",
          "createdAt": "2019-11-06 09:42:45 +0100",
          "default": null,
          "description": "Default owner on provisioned hosts, if empty Foreman will use current user",
          "fullName": "Host owner",
          "id": 85,
          "name": "host_owner",
          "readonly": false,
          "selectValues": Object {
            "collection": Array [
              Object {
                "label": "Select an owner",
                "value": null,
              },
              Object {
                "children": Array [
                  Object {
                    "label": "canned_admin",
                    "value": "13-Users",
                  },
                  Object {
                    "label": "user",
                    "value": "19-Users",
                  },
                  Object {
                    "label": "viewer",
                    "value": "27-Users",
                  },
                  Object {
                    "label": "admin",
                    "value": "4-Users",
                  },
                ],
                "groupLabel": "User",
              },
              Object {
                "children": Array [
                  Object {
                    "label": "basic broup",
                    "value": "1-Usergroups",
                  },
                  Object {
                    "label": "view hosts group",
                    "value": "2-Usergroups",
                  },
                ],
                "groupLabel": "Usergroup",
              },
            ],
            "kind": "array",
          },
          "updatedAt": "2019-11-06 09:42:45 +0100",
        },
      ],
      "Setting::Puppet": Array [
        Object {
          "category": "Setting::Puppet",
          "categoryName": "Puppet",
          "configFile": "settings.yaml",
          "createdAt": "2019-11-06 09:42:45 +0100",
          "default": false,
          "description": "All hosts will show a configuration status even when a Puppet smart proxy is not assigned",
          "fullName": "Always show configuration status",
          "id": 132,
          "name": "always_show_configuration_status",
          "readonly": false,
          "selectValues": null,
          "settingsType": "boolean",
          "updatedAt": "2019-11-06 09:42:45 +0100",
          "value": false,
        },
      ],
    }
  }
  hasData={true}
  hasError={false}
  isLoading={false}
/>
`;

exports[`SettingPageContent should render on error 1`] = `
<ErrorPage
  errorMsg={
    Object {
      "text": "Unknown error",
      "type": "500",
    }
  }
  hasData={false}
  hasError={true}
  isLoading={false}
/>
`;

exports[`SettingPageContent should render when loading 1`] = `
<LoadingPage
  hasData={false}
  isLoading={true}
/>
`;
