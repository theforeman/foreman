// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ModelsPage redering should render when loading 1`] = `
<PageLayout
  beforeToolbarComponent={null}
  breadcrumbOptions={null}
  customBreadcrumbs={null}
  header="Hardware Models"
  isLoading={false}
  onBookmarkClick={[Function]}
  onSearch={[Function]}
  searchProps={
    Object {
      "autocomplete": Object {
        "id": "searchBar",
        "searchQuery": "",
        "url": "models/auto_complete_search",
        "useKeyShortcuts": true,
      },
      "bookmarks": Object {
        "canCreate": true,
        "documentationUrl": "4.1.5Searching",
        "url": "/api/bookmarks",
      },
      "controller": "models",
    }
  }
  searchQuery="name=foo"
  searchable={true}
  toastNotifications={Array []}
  toolbarButtons={
    <ForwardRef
      to="/models/new"
    >
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="primary"
        disabled={false}
      >
        Create Model
      </Button>
    </ForwardRef>
  }
>
  <Component
    fetchAndPush={[Function]}
    hasData={false}
    hasError={false}
    isLoading={true}
    itemCount={2}
    message={Object {}}
    models={
      Array [
        Object {
          "canDelete": true,
          "canEdit": true,
          "hostsCount": 5,
          "id": 1,
          "name": "my-hw-model",
          "vendorClass": "custom",
        },
        Object {
          "canDelete": false,
          "canEdit": false,
          "hostsCount": 4,
          "id": 2,
          "name": "your-hw-model",
          "vendorClass": "B+",
        },
      ]
    }
    page={5}
    perPage={42}
    search="name=foo"
    sort={
      Object {
        "by": "defaultName",
        "order": "ASC",
      }
    }
  />
</PageLayout>
`;

exports[`ModelsPage redering should render with error 1`] = `
<PageLayout
  beforeToolbarComponent={null}
  breadcrumbOptions={null}
  customBreadcrumbs={null}
  header="Hardware Models"
  isLoading={false}
  onBookmarkClick={[Function]}
  onSearch={[Function]}
  searchProps={
    Object {
      "autocomplete": Object {
        "id": "searchBar",
        "searchQuery": "",
        "url": "models/auto_complete_search",
        "useKeyShortcuts": true,
      },
      "bookmarks": Object {
        "canCreate": true,
        "documentationUrl": "4.1.5Searching",
        "url": "/api/bookmarks",
      },
      "controller": "models",
    }
  }
  searchQuery="name=foo"
  searchable={true}
  toastNotifications={Array []}
  toolbarButtons={
    <ForwardRef
      to="/models/new"
    >
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="primary"
        disabled={false}
      >
        Create Model
      </Button>
    </ForwardRef>
  }
>
  <Component
    fetchAndPush={[Function]}
    hasData={false}
    hasError={true}
    isLoading={false}
    itemCount={2}
    message={
      Object {
        "text": "this is error",
        "type": "error",
      }
    }
    models={
      Array [
        Object {
          "canDelete": true,
          "canEdit": true,
          "hostsCount": 5,
          "id": 1,
          "name": "my-hw-model",
          "vendorClass": "custom",
        },
        Object {
          "canDelete": false,
          "canEdit": false,
          "hostsCount": 4,
          "id": 2,
          "name": "your-hw-model",
          "vendorClass": "B+",
        },
      ]
    }
    page={5}
    perPage={42}
    search="name=foo"
    sort={
      Object {
        "by": "defaultName",
        "order": "ASC",
      }
    }
  />
</PageLayout>
`;

exports[`ModelsPage redering should render with models 1`] = `
<PageLayout
  beforeToolbarComponent={null}
  breadcrumbOptions={null}
  customBreadcrumbs={null}
  header="Hardware Models"
  isLoading={false}
  onBookmarkClick={[Function]}
  onSearch={[Function]}
  searchProps={
    Object {
      "autocomplete": Object {
        "id": "searchBar",
        "searchQuery": "",
        "url": "models/auto_complete_search",
        "useKeyShortcuts": true,
      },
      "bookmarks": Object {
        "canCreate": true,
        "documentationUrl": "4.1.5Searching",
        "url": "/api/bookmarks",
      },
      "controller": "models",
    }
  }
  searchQuery="name=foo"
  searchable={true}
  toastNotifications={Array []}
  toolbarButtons={
    <ForwardRef
      to="/models/new"
    >
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="primary"
        disabled={false}
      >
        Create Model
      </Button>
    </ForwardRef>
  }
>
  <Component
    fetchAndPush={[Function]}
    hasData={true}
    hasError={false}
    isLoading={false}
    itemCount={2}
    message={Object {}}
    models={
      Array [
        Object {
          "canDelete": true,
          "canEdit": true,
          "hostsCount": 5,
          "id": 1,
          "name": "my-hw-model",
          "vendorClass": "custom",
        },
        Object {
          "canDelete": false,
          "canEdit": false,
          "hostsCount": 4,
          "id": 2,
          "name": "your-hw-model",
          "vendorClass": "B+",
        },
      ]
    }
    page={5}
    perPage={42}
    search="name=foo"
    sort={
      Object {
        "by": "defaultName",
        "order": "ASC",
      }
    }
  />
</PageLayout>
`;

exports[`ModelsPage redering should render with no data 1`] = `
<PageLayout
  beforeToolbarComponent={null}
  breadcrumbOptions={null}
  customBreadcrumbs={null}
  header="Hardware Models"
  isLoading={false}
  onBookmarkClick={[Function]}
  onSearch={[Function]}
  searchProps={
    Object {
      "autocomplete": Object {
        "id": "searchBar",
        "searchQuery": "",
        "url": "models/auto_complete_search",
        "useKeyShortcuts": true,
      },
      "bookmarks": Object {
        "canCreate": true,
        "documentationUrl": "4.1.5Searching",
        "url": "/api/bookmarks",
      },
      "controller": "models",
    }
  }
  searchQuery="name=foo"
  searchable={true}
  toastNotifications={Array []}
  toolbarButtons={
    <ForwardRef
      to="/models/new"
    >
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="primary"
        disabled={false}
      >
        Create Model
      </Button>
    </ForwardRef>
  }
>
  <Component
    fetchAndPush={[Function]}
    hasData={false}
    hasError={false}
    isLoading={false}
    itemCount={2}
    message={Object {}}
    models={
      Array [
        Object {
          "canDelete": true,
          "canEdit": true,
          "hostsCount": 5,
          "id": 1,
          "name": "my-hw-model",
          "vendorClass": "custom",
        },
        Object {
          "canDelete": false,
          "canEdit": false,
          "hostsCount": 4,
          "id": 2,
          "name": "your-hw-model",
          "vendorClass": "B+",
        },
      ]
    }
    page={5}
    perPage={42}
    search="name=foo"
    sort={
      Object {
        "by": "defaultName",
        "order": "ASC",
      }
    }
  />
</PageLayout>
`;
