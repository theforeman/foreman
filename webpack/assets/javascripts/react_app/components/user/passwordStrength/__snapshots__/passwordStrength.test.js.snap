// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Verify field display verify password field with error 1`] = `
<Connect(PasswordStrength)
  data={
    Object {
      "className": "form-control",
      "error": false,
      "id": "user_password",
      "name": "user[password]",
      "userInputIds": Array [],
      "verify": Object {
        "error": "Error",
        "name": "user[password_confirmation]",
      },
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <PasswordStrength
    checkPasswordsMatch={[Function]}
    data={
      Object {
        "className": "form-control",
        "error": false,
        "id": "user_password",
        "name": "user[password]",
        "userInputIds": Array [],
        "verify": Object {
          "error": "Error",
          "name": "user[password_confirmation]",
        },
      }
    }
    matchMessage={false}
    password="password"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    updatePassword={[Function]}
  >
    <div>
      <CommonForm
        error={false}
        label="Password"
        touched={true}
      >
        <div
          className="form-group  "
        >
          <label
            className="col-md-2 control-label"
          >
            Password
          </label>
          <div
            className="col-md-4"
          >
            <ReactPasswordStrength
              changeCallback={[Function]}
              className=""
              defaultValue=""
              inputProps={
                Object {
                  "className": "form-control",
                  "id": "user_password",
                  "name": "user[password]",
                }
              }
              minLength={6}
              minScore={2}
              scoreWords={
                Array [
                  "Weak",
                  "Medium",
                  "Normal",
                  "Strong",
                  "Very strong",
                ]
              }
              tooShortWord="Too short"
              userInputs={Array []}
            >
              <div
                className="ReactPasswordStrength  "
              >
                <input
                  className="ReactPasswordStrength-input form-control"
                  id="user_password"
                  name="user[password]"
                  onChange={[Function]}
                  type="password"
                  value=""
                />
                <div
                  className="ReactPasswordStrength-strength-bar"
                />
                <span
                  className="ReactPasswordStrength-strength-desc"
                >
                  Too short
                </span>
              </div>
            </ReactPasswordStrength>
          </div>
        </div>
      </CommonForm>
      <CommonForm
        error="Password do not match"
        label="Verify"
        touched={true}
      >
        <div
          className="form-group  has-error"
        >
          <label
            className="col-md-2 control-label"
          >
            Verify
          </label>
          <div
            className="col-md-4"
          >
            <input
              className="form-control"
              id="password_confirmation"
              name="user[password_confirmation]"
              onChange={[Function]}
              type="password"
            />
          </div>
          <span
            className="help-block help-inline"
          >
            <span
              className="error-message"
            >
              Password do not match
            </span>
          </span>
        </div>
      </CommonForm>
    </div>
  </PasswordStrength>
</Connect(PasswordStrength)>
`;

exports[`Verify field display verify password field with no error 1`] = `
<Connect(PasswordStrength)
  data={
    Object {
      "className": "form-control",
      "error": false,
      "id": "user_password",
      "name": "user[password]",
      "userInputIds": Array [],
      "verify": Object {
        "error": false,
        "name": "user[password_confirmation]",
      },
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <PasswordStrength
    checkPasswordsMatch={[Function]}
    data={
      Object {
        "className": "form-control",
        "error": false,
        "id": "user_password",
        "name": "user[password]",
        "userInputIds": Array [],
        "verify": Object {
          "error": false,
          "name": "user[password_confirmation]",
        },
      }
    }
    matchMessage={true}
    password="password"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    updatePassword={[Function]}
  >
    <div>
      <CommonForm
        error={false}
        label="Password"
        touched={true}
      >
        <div
          className="form-group  "
        >
          <label
            className="col-md-2 control-label"
          >
            Password
          </label>
          <div
            className="col-md-4"
          >
            <ReactPasswordStrength
              changeCallback={[Function]}
              className=""
              defaultValue=""
              inputProps={
                Object {
                  "className": "form-control",
                  "id": "user_password",
                  "name": "user[password]",
                }
              }
              minLength={6}
              minScore={2}
              scoreWords={
                Array [
                  "Weak",
                  "Medium",
                  "Normal",
                  "Strong",
                  "Very strong",
                ]
              }
              tooShortWord="Too short"
              userInputs={Array []}
            >
              <div
                className="ReactPasswordStrength  "
              >
                <input
                  className="ReactPasswordStrength-input form-control"
                  id="user_password"
                  name="user[password]"
                  onChange={[Function]}
                  type="password"
                  value=""
                />
                <div
                  className="ReactPasswordStrength-strength-bar"
                />
                <span
                  className="ReactPasswordStrength-strength-desc"
                >
                  Too short
                </span>
              </div>
            </ReactPasswordStrength>
          </div>
        </div>
      </CommonForm>
      <CommonForm
        error={false}
        label="Verify"
        touched={true}
      >
        <div
          className="form-group  "
        >
          <label
            className="col-md-2 control-label"
          >
            Verify
          </label>
          <div
            className="col-md-4"
          >
            <input
              className="form-control"
              id="password_confirmation"
              name="user[password_confirmation]"
              onChange={[Function]}
              type="password"
            />
          </div>
        </div>
      </CommonForm>
    </div>
  </PasswordStrength>
</Connect(PasswordStrength)>
`;

exports[`Verify field verify password field should not rendered 1`] = `
<Connect(PasswordStrength)
  data={
    Object {
      "className": "form-control",
      "error": false,
      "id": "user_password",
      "name": "user[password]",
      "userInputIds": Array [],
      "verify": false,
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <PasswordStrength
    checkPasswordsMatch={[Function]}
    data={
      Object {
        "className": "form-control",
        "error": false,
        "id": "user_password",
        "name": "user[password]",
        "userInputIds": Array [],
        "verify": false,
      }
    }
    matchMessage={true}
    password=""
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    updatePassword={[Function]}
  >
    <div>
      <CommonForm
        error={false}
        label="Password"
        touched={true}
      >
        <div
          className="form-group  "
        >
          <label
            className="col-md-2 control-label"
          >
            Password
          </label>
          <div
            className="col-md-4"
          >
            <ReactPasswordStrength
              changeCallback={[Function]}
              className=""
              defaultValue=""
              inputProps={
                Object {
                  "className": "form-control",
                  "id": "user_password",
                  "name": "user[password]",
                }
              }
              minLength={6}
              minScore={2}
              scoreWords={
                Array [
                  "Weak",
                  "Medium",
                  "Normal",
                  "Strong",
                  "Very strong",
                ]
              }
              tooShortWord="Too short"
              userInputs={Array []}
            >
              <div
                className="ReactPasswordStrength  "
              >
                <input
                  className="ReactPasswordStrength-input form-control"
                  id="user_password"
                  name="user[password]"
                  onChange={[Function]}
                  type="password"
                  value=""
                />
                <div
                  className="ReactPasswordStrength-strength-bar"
                />
                <span
                  className="ReactPasswordStrength-strength-desc"
                >
                  Too short
                </span>
              </div>
            </ReactPasswordStrength>
          </div>
        </div>
      </CommonForm>
    </div>
  </PasswordStrength>
</Connect(PasswordStrength)>
`;
