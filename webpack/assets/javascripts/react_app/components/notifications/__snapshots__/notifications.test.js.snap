// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`notifications empty state 1`] = `
<OnClickOutside(notificationContainer)
  eventTypes={
    Array [
      "mousedown",
      "touchstart",
    ]
  }
  excludeScrollbar={false}
  expandGroup={[Function]}
  isReady={false}
  notifications={Object {}}
  onClickedLink={[Function]}
  onMarkAsRead={[Function]}
  onMarkGroupAsRead={[Function]}
  outsideClickIgnoreClass="ignore-react-onclickoutside"
  preventDefault={false}
  startNotificationsPolling={[Function]}
  stopPropagation={false}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": [Function],
    }
  }
  toggleDrawer={[Function]}
/>
`;

exports[`notifications should close the notification box when click the close button 1`] = `
<Connect(OnClickOutside(notificationContainer))
  data={
    Object {
      "url": "/notification_recipients",
    }
  }
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <OnClickOutside(notificationContainer)
    data={
      Object {
        "url": "/notification_recipients",
      }
    }
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    expandGroup={[Function]}
    expandedGroup={null}
    hasUnreadMessages={true}
    isDrawerOpen={true}
    isPolling={true}
    isReady={true}
    notifications={
      Object {
        "React devs": Array [
          Object {
            "actions": Object {},
            "created_at": "2017-02-23T05:00:28.715Z",
            "group": "React devs",
            "id": 1,
            "level": "info",
            "seen": true,
            "text": null,
          },
          Object {
            "actions": Object {},
            "created_at": "2017-02-23T05:00:28.715Z",
            "group": "React devs",
            "id": 2,
            "level": "info",
            "seen": false,
            "text": null,
          },
        ],
      }
    }
    onClickedLink={[Function]}
    onMarkAsRead={[Function]}
    onMarkGroupAsRead={[Function]}
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    startNotificationsPolling={[Function]}
    stopPropagation={false}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
    toggleDrawer={[Function]}
  >
    <notificationContainer
      data={
        Object {
          "url": "/notification_recipients",
        }
      }
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      expandGroup={[Function]}
      expandedGroup={null}
      hasUnreadMessages={true}
      isDrawerOpen={true}
      isPolling={true}
      isReady={true}
      notifications={
        Object {
          "React devs": Array [
            Object {
              "actions": Object {},
              "created_at": "2017-02-23T05:00:28.715Z",
              "group": "React devs",
              "id": 1,
              "level": "info",
              "seen": true,
              "text": null,
            },
            Object {
              "actions": Object {},
              "created_at": "2017-02-23T05:00:28.715Z",
              "group": "React devs",
              "id": 2,
              "level": "info",
              "seen": false,
              "text": null,
            },
          ],
        }
      }
      onClickedLink={[Function]}
      onMarkAsRead={[Function]}
      onMarkGroupAsRead={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      startNotificationsPolling={[Function]}
      stopPropagation={false}
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "unsubscribe": [Function],
        }
      }
      toggleDrawer={[Function]}
    >
      <div>
        <Component
          hasUnreadMessages={true}
          onClick={[Function]}
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            id="notifications-toggle-icon"
            overlay={
              <Tooltip
                bsClass="tooltip"
                id="tooltip"
                placement="right"
              >
                Notifications
              </Tooltip>
            }
            placement="bottom"
            trigger={
              Array [
                "hover",
                "focus",
              ]
            }
          >
            <span
              aria-describedby="tooltip"
              className="fa fa-bell"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onMouseOut={[Function]}
              onMouseOver={[Function]}
            />
          </OverlayTrigger>
        </Component>
        <Component
          expandedGroup={null}
          notificationGroups={
            Object {
              "React devs": Array [
                Object {
                  "actions": Object {},
                  "created_at": "2017-02-23T05:00:28.715Z",
                  "group": "React devs",
                  "id": 1,
                  "level": "info",
                  "seen": true,
                  "text": null,
                },
                Object {
                  "actions": Object {},
                  "created_at": "2017-02-23T05:00:28.715Z",
                  "group": "React devs",
                  "id": 2,
                  "level": "info",
                  "seen": false,
                  "text": null,
                },
              ],
            }
          }
          onClickedLink={[Function]}
          onExpandGroup={[Function]}
          onMarkAsRead={[Function]}
          onMarkGroupAsRead={[Function]}
          toggleDrawer={[Function]}
        >
          <div
            className="drawer-pf drawer-pf-notifications-non-clickable"
          >
            <div
              className="drawer-pf-title"
            >
              <a
                className="drawer-pf-close pficon pficon-close"
                onClick={[Function]}
              />
              <h3
                className="text-center"
              >
                Notifications
              </h3>
            </div>
            <div
              className="panel-group"
              id="notification-drawer-accordion"
            >
              <Component
                group="React devs"
                isExpanded={false}
                key="React devs"
                notifications={
                  Array [
                    Object {
                      "actions": Object {},
                      "created_at": "2017-02-23T05:00:28.715Z",
                      "group": "React devs",
                      "id": 1,
                      "level": "info",
                      "seen": true,
                      "text": null,
                    },
                    Object {
                      "actions": Object {},
                      "created_at": "2017-02-23T05:00:28.715Z",
                      "group": "React devs",
                      "id": 2,
                      "level": "info",
                      "seen": false,
                      "text": null,
                    },
                  ]
                }
                onClickedLink={[Function]}
                onExpand={[Function]}
                onMarkAsRead={[Function]}
                onMarkGroupAsRead={[Function]}
              >
                <div
                  className="panel panel-default "
                >
                  <div
                    className="panel-heading"
                    onClick={[Function]}
                  >
                    <h4
                      className="panel-title"
                    >
                      <a
                        className="collapsed"
                      >
                        React devs
                      </a>
                    </h4>
                    <span
                      className="panel-counter"
                    >
                      1 New Event
                    </span>
                  </div>
                </div>
              </Component>
            </div>
          </div>
        </Component>
      </div>
    </notificationContainer>
  </OnClickOutside(notificationContainer)>
</Connect(OnClickOutside(notificationContainer))>
`;

exports[`notifications should close the notification box when click the close button 2`] = `
<Connect(OnClickOutside(notificationContainer))
  data={
    Object {
      "url": "/notification_recipients",
    }
  }
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <OnClickOutside(notificationContainer)
    data={
      Object {
        "url": "/notification_recipients",
      }
    }
    eventTypes={
      Array [
        "mousedown",
        "touchstart",
      ]
    }
    excludeScrollbar={false}
    expandGroup={[Function]}
    expandedGroup={null}
    hasUnreadMessages={true}
    isDrawerOpen={false}
    isPolling={true}
    isReady={true}
    notifications={
      Object {
        "React devs": Array [
          Object {
            "actions": Object {},
            "created_at": "2017-02-23T05:00:28.715Z",
            "group": "React devs",
            "id": 1,
            "level": "info",
            "seen": true,
            "text": null,
          },
          Object {
            "actions": Object {},
            "created_at": "2017-02-23T05:00:28.715Z",
            "group": "React devs",
            "id": 2,
            "level": "info",
            "seen": false,
            "text": null,
          },
        ],
      }
    }
    onClickedLink={[Function]}
    onMarkAsRead={[Function]}
    onMarkGroupAsRead={[Function]}
    outsideClickIgnoreClass="ignore-react-onclickoutside"
    preventDefault={false}
    startNotificationsPolling={[Function]}
    stopPropagation={false}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
    toggleDrawer={[Function]}
  >
    <notificationContainer
      data={
        Object {
          "url": "/notification_recipients",
        }
      }
      disableOnClickOutside={[Function]}
      enableOnClickOutside={[Function]}
      eventTypes={
        Array [
          "mousedown",
          "touchstart",
        ]
      }
      expandGroup={[Function]}
      expandedGroup={null}
      hasUnreadMessages={true}
      isDrawerOpen={false}
      isPolling={true}
      isReady={true}
      notifications={
        Object {
          "React devs": Array [
            Object {
              "actions": Object {},
              "created_at": "2017-02-23T05:00:28.715Z",
              "group": "React devs",
              "id": 1,
              "level": "info",
              "seen": true,
              "text": null,
            },
            Object {
              "actions": Object {},
              "created_at": "2017-02-23T05:00:28.715Z",
              "group": "React devs",
              "id": 2,
              "level": "info",
              "seen": false,
              "text": null,
            },
          ],
        }
      }
      onClickedLink={[Function]}
      onMarkAsRead={[Function]}
      onMarkGroupAsRead={[Function]}
      outsideClickIgnoreClass="ignore-react-onclickoutside"
      preventDefault={false}
      startNotificationsPolling={[Function]}
      stopPropagation={false}
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "unsubscribe": [Function],
        }
      }
      toggleDrawer={[Function]}
    >
      <div>
        <Component
          hasUnreadMessages={true}
          onClick={[Function]}
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            id="notifications-toggle-icon"
            overlay={
              <Tooltip
                bsClass="tooltip"
                id="tooltip"
                placement="right"
              >
                Notifications
              </Tooltip>
            }
            placement="bottom"
            trigger={
              Array [
                "hover",
                "focus",
              ]
            }
          >
            <span
              aria-describedby="tooltip"
              className="fa fa-bell"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onMouseOut={[Function]}
              onMouseOver={[Function]}
            />
          </OverlayTrigger>
        </Component>
      </div>
    </notificationContainer>
  </OnClickOutside(notificationContainer)>
</Connect(OnClickOutside(notificationContainer))>
`;

exports[`notifications should render empty html for state before notifications 1`] = `
<OnClickOutside(notificationContainer)
  eventTypes={
    Array [
      "mousedown",
      "touchstart",
    ]
  }
  excludeScrollbar={false}
  expandGroup={[Function]}
  expandedGroup="React devs2"
  isDrawerOpen={true}
  isReady={false}
  notifications={Object {}}
  onClickedLink={[Function]}
  onMarkAsRead={[Function]}
  onMarkGroupAsRead={[Function]}
  outsideClickIgnoreClass="ignore-react-onclickoutside"
  preventDefault={false}
  startNotificationsPolling={[Function]}
  stopPropagation={false}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": [Function],
    }
  }
  toggleDrawer={[Function]}
/>
`;

exports[`notifications should render full html on a state with notifications 1`] = `
<OnClickOutside(notificationContainer)
  eventTypes={
    Array [
      "mousedown",
      "touchstart",
    ]
  }
  excludeScrollbar={false}
  expandGroup={[Function]}
  expandedGroup="React devs2"
  hasUnreadMessages={true}
  isDrawerOpen={true}
  isReady={true}
  notifications={
    Object {
      "React devs": Array [
        Object {
          "actions": Object {},
          "created_at": "2017-02-23T05:00:28.715Z",
          "group": "React devs",
          "id": 1,
          "level": "info",
          "seen": true,
          "text": null,
        },
      ],
      "React devs2": Array [
        Object {
          "actions": Object {
            "links": Array [
              Object {
                "href": "https://theforeman.org/blog",
                "title": "Link to blog",
              },
            ],
          },
          "created_at": "2017-03-14T11:25:07.138Z",
          "group": "React devs2",
          "id": 6,
          "level": "info",
          "seen": true,
          "text": "Hi! This is a notification message",
        },
      ],
    }
  }
  onClickedLink={[Function]}
  onMarkAsRead={[Function]}
  onMarkGroupAsRead={[Function]}
  outsideClickIgnoreClass="ignore-react-onclickoutside"
  preventDefault={false}
  startNotificationsPolling={[Function]}
  stopPropagation={false}
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": [Function],
    }
  }
  toggleDrawer={[Function]}
/>
`;
